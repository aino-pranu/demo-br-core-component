{"version":3,"file":"enterprise-tree.js.map","sources":["ng://enterprise-tree/lib/enterprise-tree.service.ts","ng://enterprise-tree/lib/dynamic-data-source.component.ts","ng://enterprise-tree/config/ActionsAndToolsConfig.ts","ng://enterprise-tree/config/LeafColumnConfig.ts","ng://enterprise-tree/config/TreeConfig.ts","ng://enterprise-tree/lib/enterprise-tree.component.ts","ng://enterprise-tree/common/material-module.ts","ng://enterprise-tree/directive/ao-tree-data.directive.ts","ng://enterprise-tree/directive/ao-actions.directive.ts","ng://enterprise-tree/directive/ao-tree-config.directive.ts","ng://enterprise-tree/lib/enterprise-tree.module.ts","ng://enterprise-tree/action/BaseActionDispatcher.ts","ng://enterprise-tree/config/ActionType.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnterpriseTreeService {\n\n  constructor() { }\n}\n","import { BehaviorSubject, Observable, merge } from 'rxjs';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { map } from 'rxjs/internal/operators/map';\nimport { ChangeDetectorRef, Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { ActionDispatcher } from '../action/ActionDispatcher';\nimport { SearchItemNode } from './enterprise-tree.component';\n\n/** Flat node with expandable and level information */\nexport class DynamicFlatNode {\n    constructor(\n        public item?: string,\n        public level?: number,\n        public resultObject?: Object,\n        public expandable?: boolean,\n        public isLoading?: boolean,\n        public code?: string,\n        public children?: DynamicFlatNode[]\n    ) { }\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\n@Injectable()\nexport class DynamicDatabase {\n    dataChange = new BehaviorSubject<SearchItemNode[]>([]);\n\n    get data(): SearchItemNode[] { return this.dataChange.value; }\n\n    dataMap = new Map<string, string[]>();\n\n    nodeLevelMethodConfigurations = new Map<number, string>();\n\n    nodePropertyNames = new Map<number, string>();\n\n    currentLeafNodeNames = new Array();\n\n    filteredMode: boolean = false;\n\n    pagingMode: boolean = true;\n\n    rootLevelName;\n\n    rootLevelNodes = [];\n\n    currentSelectedNode: DynamicFlatNode = new DynamicFlatNode();\n\n    public currentSelectedNodeSource = new BehaviorSubject<DynamicFlatNode>(this.currentSelectedNode);\n    currentSelectedNodeValue = this.currentSelectedNodeSource.asObservable();\n\n    get getCurrentSelectedNode() {\n        return this.currentSelectedNode;\n    }\n\n    set setCurrentSelectedNode(value) {\n        this.currentSelectedNode = value;\n        this.currentSelectedNodeSource.next(this.currentSelectedNode);\n    }\n\n    get getRootLevelNodes() {\n        return this.rootLevelNodes;\n    }\n\n    set setRootLevelNodes(value) {\n        this.rootLevelNodes = value;\n    }\n\n    public currentSelectedLeafNodeSource = new BehaviorSubject<any>(this.currentLeafNodeNames);\n    currentSelectedLeafNodeValue = this.currentSelectedLeafNodeSource.asObservable();\n\n    get getCurrentSelectedLeafNode() {\n        return this.currentLeafNodeNames;\n    }\n\n    set setCurrentSelectedLeafNode(value) {\n        this.currentLeafNodeNames = value;\n        this.currentSelectedLeafNodeSource.next(this.currentLeafNodeNames);\n    }\n\n    /** Initialize data for root level nodes */\n    initialData(): DynamicFlatNode[] {\n\n        return this.rootLevelNodes.map(result => new DynamicFlatNode(result[this.rootLevelName], 0, result, true));\n    }\n\n\n    getChildren(node: string): string[] | undefined {\n        return this.dataMap.get(node);\n    }\n\n    isExpandable(node: string): boolean {\n        return this.dataMap.has(node);\n    }\n}\n\n\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\n@Injectable()\nexport class DynamicDataSource implements OnInit, OnDestroy {\n\n    dataChange: BehaviorSubject<DynamicFlatNode[]> = new BehaviorSubject<DynamicFlatNode[]>([]);\n    operationList;\n    currentService: string;\n\n\n\n    private actionDispatcher: ActionDispatcher;\n\n    get data(): DynamicFlatNode[] {\n        return this.dataChange.value;\n    }\n\n    set data(value: DynamicFlatNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    public set setActionDispatcher(value: any) {\n        this.actionDispatcher = value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<DynamicFlatNode>, private database: DynamicDatabase, private changeDetectorRef: ChangeDetectorRef) {\n\n    }\n\n    ngOnInit(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public ngOnDestroy(): void {\n        this.changeDetectorRef.detach();\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n        this.treeControl.expansionModel.onChange!.subscribe(change => {\n            if ((change as SelectionChange<DynamicFlatNode>).added ||\n                (change as SelectionChange<DynamicFlatNode>).removed) {\n                this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n            }\n        });\n\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n\n    disconnect(collectionViewer: CollectionViewer): void {\n        this.dataChange.complete();\n    }\n\n    /** Handle expand/collapse behaviors */\n    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n\n        if (change.added) {\n            change.added.forEach(node => this.toggleNode(node, true));\n        }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n        }\n    }\n\n    /**\n     * Toggle the node for the selected node, and make server call to get it's children.\n     */\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n\n        let currentPropertyName;\n\n        this.database.filteredMode = false;\n\n        if (this.database.filteredMode === false) {\n\n            this.database.setCurrentSelectedNode = node;\n\n            for (let [level, token] of this.database.nodeLevelMethodConfigurations) {\n                if (level === node.level) {\n\n                    /** Dispatch action for leaf node. */\n                    if (level === this.database.nodeLevelMethodConfigurations.size - 1) {\n\n                        this.actionDispatcher.dispatchAction(token, node.resultObject).then(\n                            result => {\n                                let currentLeafNodeNames = new Array();\n\n                                for (let [level, propName] of this.database.nodePropertyNames) {\n                                    if (level === node.level) {\n                                        currentPropertyName = propName;\n                                    }\n                                }\n\n                                if(result != null) {\n\n                                    for (let i = 0; i < result.length; i++) {\n\n                                        currentLeafNodeNames.push(result[i][currentPropertyName]);\n                                    }\n                                }\n\n                                this.database.setCurrentSelectedLeafNode = result;\n\n                            }\n                        );\n\n                    } else {\n                        node.isLoading = true;\n\n                        this.actionDispatcher.dispatchAction(token, node.resultObject).then(\n                            result => {\n                                this.populateNodeList(result, node, expand);\n                            }\n                        );\n                    }\n                }\n            }\n        }\n\n    }\n\n    /** Populate parent nodes with their children*/\n    populateNodeList(nodeList, node, expand) {\n\n        let nodeNames = new Array();\n        let currentPropertyName;\n\n        for (let [level, propName] of this.database.nodePropertyNames) {\n            if (level === node.level) {\n                currentPropertyName = propName;\n            }\n        }\n\n        if (nodeList != null) {\n\n            for (let i = 0; i < nodeList.length; i++) {\n\n                nodeNames.push(nodeList[i][currentPropertyName]);\n            }\n\n            this.database.dataMap.set(node.item, nodeNames);\n\n            this.expandChildNodes(node, expand, nodeList, nodeNames);\n\n        } else {\n            node.isLoading = false;\n            return;\n        }\n    }\n\n    /** Expand child nodes */\n    expandChildNodes(node: DynamicFlatNode, expand: boolean, nodeList, childNodes) {\n\n        const children = this.database.getChildren(node.item);\n        const index = this.data.indexOf(node);\n\n        if (!children || index < 0) { // If no children, or cannot find the node, no op\n            console.log(\"no children returning\");\n            return;\n        }\n\n        if (expand) {\n\n            let i = 0;\n\n            /** Create new child nodes */\n            const nodes = nodeList.map(result => new DynamicFlatNode(childNodes[i++], node.level + 1, result, this.database.isExpandable(node.item)));\n\n            this.data.splice(index + 1, 0, ...nodes);\n\n        } else {\n            let count = 0;\n            for (let i = index + 1; i < this.data.length && this.data[i].level > node.level; i++, count++) { }\n            this.data.splice(index + 1, count);\n        }\n\n        /** notify the change */\n        this.dataChange.next(this.data);\n        node.isLoading = false;\n        this.changeDetectorRef.detectChanges();\n    }\n}","export class ActionsAndToolsConfig {\n\n    public name: string;\n    public enable: boolean;\n    public token: string;\n    public level: number;\n    public type: string;\n    public isIcon: boolean;\n    public nodePropertyName: string;\n    public isApp: boolean;\n\n    public constructor(name: string, enable: boolean, token: string, level?: number, type?: string, icon?: boolean, nodePropertyName?: string, isApp?: boolean) {\n        this.name = name;\n        this.enable = enable;\n        this.token = token;\n        this.level = level;\n        this.type = type;\n        this.isIcon = icon;\n        this.nodePropertyName = nodePropertyName;\n        this.isApp = isApp;\n    }\n\n    public get getName(): string {\n        return this.name;\n    }\n    public set setName(value: string) {\n        this.name = value;\n    }\n    public get getEnable(): boolean {\n        return this.enable;\n    }\n    public set setEnable(value: boolean) {\n        this.enable = value;\n    }\n    public get getToken(): string {\n        return this.token;\n    }\n    public set setToken(value: string) {\n        this.token = value;\n    }\n    public get getLevel(): number {\n        return this.level;\n    }\n    public set setLevel(value: number) {\n        this.level = value;\n    }\n    public get getType(): string {\n        return this.type;\n    }\n    public set setType(value: string) {\n        this.type = value;\n    }\n    public get getIcon(): boolean {\n        return this.isIcon;\n    }\n    public set setIcon(value: boolean) {\n        this.isIcon = value;\n    }\n    public get getNodePropertyName(): string {\n        return this.nodePropertyName;\n    }\n    public set setNodePropertyName(value: string) {\n        this.nodePropertyName = value;\n    }\n    public get getApp(): boolean {\n        return this.isApp;\n    }\n    public set setApp(value: boolean) {\n        this.isApp = value;\n    }\n}","export class LeafColumnConfig {\n    private name: String;\n    private item: String;\n    private position: number;\n   \n    constructor(name , item , position){\n        this.name=name;\n        this.item=item;\n        this.position=position;\n    }\n\n    public get getname(): String {\n        return this.name;\n    }\n    public set setname(value: String) {\n        this.name = value;\n    }\n    public get getitem(): String {\n        return this.item;\n    }\n    public set setitem(value: String) {\n        this.item = value;\n    }\n    public get getPosition(): number {\n        return this.position;\n    }\n    public set setPosition(value: number) {\n        this.position = value;\n    }\n}","import { ActionsAndToolsConfig } from './ActionsAndToolsConfig';\nimport { Injectable } from '@angular/core';\nimport { LeafColumnConfig } from './LeafColumnConfig';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeConfig {\n\n    public treeHeader: string;\n    public totalLevels: number;\n    public rootLevelNode : string;\n    public actionsAndToolsArr: ActionsAndToolsConfig[] = new Array();\n    public pageSize: number;\n    public leafNodeTitle: string;\n    public leafNodeName: string;\n    public leafColumnConfigArr: LeafColumnConfig[] = new Array();\n    \n    constructor() {\n\n    }\n\n    public get getTreeHeader(): string {\n        return this.treeHeader;\n    }\n\n    public set setTreeHeader(value: string) {\n        this.treeHeader = value;\n    }\n\n    public get getTotalLevels(): number {\n        return this.totalLevels;\n    }\n\n    public set setTotalLevels(value: number) {\n        this.totalLevels = value;\n    }\n\n    public get getRootLevelNode(): string {\n        return this.rootLevelNode;\n    }\n\n    public set setRootLevelNode(value: string) {\n        this.rootLevelNode = value;\n    }\n\n    public addActionsAndToolConfig(name: string, enable: boolean, token: string, level?: number, type?: string, isIcon?: boolean, nodeName?: string, isApp?: boolean) {\n        this.actionsAndToolsArr.push(new ActionsAndToolsConfig(name, enable, token, level, type, isIcon, nodeName, isApp));\n    }\n\n    public get getPageSize() {\n        return this.pageSize;\n    }\n    public set setPageSize(value) {\n        this.pageSize = value;\n    }\n\n    public get getLeafNodeTitle() {\n        return this.leafNodeTitle;\n    }\n\n    public set setLeafNodeTitle(value) {\n        this.leafNodeTitle = value;\n    }\n\n    public get getLeafNodeName() {\n        return this.leafNodeName;\n    }\n\n    public set setLeafNodeName(value) {\n        this.leafNodeName = value;\n    }\n\n    public get getLeafNodeColumnConfig(): LeafColumnConfig[] {\n        return this.leafColumnConfigArr;\n    }\n\n    public addLeafNodeColumnConfig(name: string, item: string, position: number) {\n        this.leafColumnConfigArr.push(new LeafColumnConfig(name, item, position));\n    }\n}","import { Component, OnInit, Injectable, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { TreeData } from '../action/TreeData';\nimport { ActionDispatcher } from '../action/ActionDispatcher';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { DynamicDatabase, DynamicFlatNode, DynamicDataSource } from './dynamic-data-source.component';\nimport { ActionsAndToolsConfig } from '../config/ActionsAndToolsConfig';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material';\nimport { TreeConfig } from '../config/TreeConfig';\n\n/**\n * Node for to-do item\n */\nexport class SearchItemNode {\n  children: SearchItemNode[];\n  item: string;\n  code: string;\n  resultObject: Object;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class SearchItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n  code: string;\n  resultObject: Object;\n}\n\n\n@Component({\n  selector: 'ao-enterprise-tree',\n  templateUrl: './enterprise-tree.component.html',\n  styleUrls: ['./enterprise-tree.component.css'],\n  providers: [DynamicDatabase],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseTreeComponent implements OnInit, OnDestroy {\n\n  treeConfig = new Array();\n\n  treeDataList = new Array();\n\n  treeData: TreeData;\n\n  treeHeader: string = '';\n\n  //Search Value\n  searchValue: string;\n\n  //Search Name Suggestion\n  searchNameSuggestion = [];\n\n  //Clear Filter\n  clearFliter: boolean = false;\n\n  //Add Filter Button loop\n  filterSelectedValue = {};\n\n  //Display filter loop \n  displayFilterValue = [];\n\n  //Key for search data\n  getKey;\n\n  counter: number = 0;\n\n  pageNumber: number = 1;\n\n  pageSize: number = 12;\n\n  rootLevelNode: string = '';\n\n  //Total tree node levels\n  totalLevels: number = 0;\n\n  enableActionToolbar = new ActionsAndToolsConfig(\"enableActionToolbar\", false, '');\n  enableSearchToolBar = new ActionsAndToolsConfig(\"enableSearchToolBar\", false, '');\n  enableSearchPlaceholder = new ActionsAndToolsConfig(\"enableSearchPlaceholder\", false, '');\n  enableSearchBar = new ActionsAndToolsConfig(\"enableSearchBar\", false, '');\n  enableInitialText = new ActionsAndToolsConfig(\"enableInitialText\", false, '');\n  enableNodeDetails = new ActionsAndToolsConfig(\"enableNodeDetails\", false, '');\n  enableLeafNodeDetails = new ActionsAndToolsConfig(\"enableLeafNodeDetails\", false, '');\n  nodeFilteration = new ActionsAndToolsConfig(\"nodeFilteration\", true, '');\n\n  enableAppToolButton = new ActionsAndToolsConfig(\"enableAppToolButton\", false, '');\n  openAppSameWindow = new ActionsAndToolsConfig(\"openAppSameWindow\", false, '');\n  openAppNewTab = new ActionsAndToolsConfig(\"openAppNewTab\", false, '');\n\n  currentNodeDetailList = new Map();\n\n  currentLeafNodeDetailList = new Array();\n\n  //Leaf node grid view column names\n  leafColumnConfig = new Array();\n\n  //Leaf node data\n  treeLeafDataList = new Array();\n\n  //Leaf node title in Summary details\n  leafNodeTitle = '';\n\n  //Leaf node name in result json object\n  leafNodeName = '';\n\n  //Leaf node code list for displaying result object of search services by text(In filtered Mode = On)\n  nodeCodeList = [];\n\n  leafContainerElement;\n  row: HTMLTableRowElement;\n  tdElement: HTMLTableCellElement;\n  thElement: HTMLTableHeaderCellElement;\n\n  private actionDispatcher: ActionDispatcher;\n\n  flatNodeMap = new Map<SearchItemFlatNode, SearchItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<SearchItemNode, SearchItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: SearchItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<any>;\n\n  dataSource;\n\n  treeFlattener: MatTreeFlattener<SearchItemNode, SearchItemFlatNode>;\n\n  getLevel = (node: SearchItemFlatNode) => node.level;\n\n  isExpandable = (node: SearchItemFlatNode) => node.expandable;\n\n  getChildren = (node: SearchItemNode): SearchItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: SearchItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: SearchItemFlatNode) => _nodeData.item === '';\n\n  transformer = (node: SearchItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n      ? existingNode\n      : new SearchItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  @ViewChild(CdkVirtualScrollViewport, { static: false }) virtualScroll: CdkVirtualScrollViewport;\n\n  constructor(private database: DynamicDatabase, private treeConfiguration: TreeConfig, private ref: ChangeDetectorRef) {\n\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, this.database, this.ref);\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n\n    this.database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  /** Destroys/Detaches the change detection reference. */\n  public ngOnDestroy(): void {\n    this.ref.detach();\n  }\n\n  public ngOnInit() {\n    this.leafColumnConfig = [];\n\n    /** Subscribes to the current selected node value. */\n    this.database.currentSelectedNodeValue.subscribe((node) => {\n\n      if (node.item !== undefined) {\n        this.enableInitialText.setEnable = false;\n        this.enableNodeDetails.setEnable = true;\n\n        if (this.enableLeafNodeDetails.enable === true) {\n          this.enableLeafNodeDetails.enable = false;\n        }\n\n        this.currentNodeDetailList.clear();\n        this.clearLeafTableData();\n\n        this.printDetails(node.resultObject);\n        this.ref.detectChanges();\n      }\n    });\n\n    /** Subscribes to the current selected leaf node value. */\n    this.database.currentSelectedLeafNodeValue.subscribe((result) => {\n\n      if (result.length !== 0) {\n        this.enableInitialText.setEnable = false;\n        this.enableNodeDetails.setEnable = true;\n        this.enableLeafNodeDetails.setEnable = true;\n        this.treeLeafDataList = result;\n        this.ref.detectChanges();\n        this.createLeafNodeDetailGrid();\n      }\n    });\n  }\n\n  /** Method displays the node details(other than leaf node) for the selected tree node. */\n  printDetails(nodeDetailObj) {\n\n    if (this.database.filteredMode === true) {\n      if (this.enableLeafNodeDetails.enable === true) {\n        this.enableLeafNodeDetails.enable = false;\n      }\n    }\n\n    for (const i in nodeDetailObj) {\n      if (nodeDetailObj[i] instanceof Object) {\n        this.printDetails(nodeDetailObj[i]);\n\n      } else {\n        for (const [key, value] of Object.entries(nodeDetailObj)) {\n          if (value instanceof Array) {\n\n            delete nodeDetailObj[key];\n\n          }\n          this.currentNodeDetailList.set(i, nodeDetailObj[i]);\n        }\n      }\n    }\n\n  }\n\n  /** Sets the tree data */\n  set setTreeData(data) {\n    this.treeData = data;\n  }\n\n  /** Set action dispatcher value @param value to Data Source. */\n  public set setActionDispatcher(value: any) {\n    this.actionDispatcher = value;\n    this.dataSource.setActionDispatcher = value;\n  }\n\n  /** Sets tree configurations @param data to enterprise tree respective properties. */\n  set setTreeConfig(data) {\n\n    if (data.pageSize != undefined || data.pageSize != null) {\n      this.pageSize = data.pageSize;\n    }\n\n    this.treeHeader = data.treeHeader;\n    this.treeConfig = data.actionsAndToolsArr;\n    this.rootLevelNode = data.rootLevelNode;\n    this.totalLevels = data.totalLevels;\n    this.leafNodeTitle = data.leafNodeTitle;\n    this.leafNodeName = data.leafNodeName;\n    this.treeConfiguration.setTotalLevels = data.totalLevels;\n    this.leafColumnConfig = data.leafColumnConfigArr;\n\n    this.sortTreeConfig(this.treeConfig);\n    this.setTreeDataToTreeView();\n  }\n\n  /**\n   * This method sorts the tree configuration.\n   * @param treeConfig JSON object of tree configuration.\n   */\n  sortTreeConfig(treeConfig) {\n    let enterpTreeCompKeys = Object.getOwnPropertyNames(this);\n\n    for (let i = 0; i < enterpTreeCompKeys.length; i++) {\n      for (let j = 0; j < treeConfig.length; j++) {\n        if (treeConfig[j].name === enterpTreeCompKeys[i]) {\n          this[enterpTreeCompKeys[i]] = treeConfig[j];\n          break;\n        }\n      }\n    }\n\n    for (let j = 0; j < treeConfig.length; j++) {\n      if (treeConfig[j].type === 'node_action') {\n\n        this.database.nodeLevelMethodConfigurations.set(treeConfig[j].level, treeConfig[j].token);\n\n        this.database.nodePropertyNames.set(treeConfig[j].level, treeConfig[j].nodePropertyName);\n\n      }\n    }\n\n  }\n\n  /** \n   * Initialize the root level tree data to @rootLevelNodes & root level node name to @rootLevelNode */\n  setTreeDataToTreeView() {\n\n    this.treeData.getRootNodeData(this.pageNumber, this.pageSize).then(\n      result => {\n        this.database.rootLevelName = this.rootLevelNode;\n        this.database.rootLevelNodes = result;\n\n        this.dataSource.data = this.database.initialData();\n      }\n    );\n  }\n\n  /**\n   * Append the next batch of tree data to @rootLevelNodes */\n  getNextBatchOfPage() {\n\n    if (Math.floor(this.virtualScroll.measureScrollOffset('bottom')) === 0) {\n\n      console.log(Math.floor(this.virtualScroll.measureScrollOffset('bottom')), \"getNextBatchOfPage \");\n\n      if (this.database.pagingMode === true) {\n\n        this.treeData.getNextPage(++this.pageNumber, this.pageSize).then(\n          result => {\n\n            if (result != null) {\n              this.treeDataList = result;\n\n              this.database.rootLevelName = this.rootLevelNode;\n\n              for (let i = 0; i < this.treeDataList.length; i++) {\n                this.database.rootLevelNodes.push(this.treeDataList[i]);\n              }\n\n              this.dataSource.data = this.database.initialData();\n\n            } else {\n              return;\n            }\n          },\n          error => {\n            console.log(error);\n          }\n        );\n      }\n    }\n  }\n\n  /** Filters the tree data with input of text type. */\n  filterNodes(filterText: string) {\n\n    this.database.filteredMode = true;\n    this.database.pagingMode = false;\n\n    if (filterText) {\n      this.enableInitialText.setEnable = true;\n      this.enableNodeDetails.setEnable = false;\n\n      this.actionDispatcher.dispatchAction(this.nodeFilteration.token, filterText).then(\n        result => {\n\n          /** Set the tree control for SearchItemFlatNodes. */\n          this.treeControl = new FlatTreeControl<SearchItemFlatNode>(this.getLevel, this.isExpandable);\n\n          /** Set the data Source for SearchItemFlatNodes and SearchItemNode. */\n          this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n          if (result.length > 0) {\n\n            this.createSearchedNodes(result);\n\n          }\n        });\n    }\n    if (filterText === '') {\n      this.enableInitialText.setEnable = true;\n      this.enableNodeDetails.setEnable = false;\n      this.enableLeafNodeDetails.setEnable = false;\n      this.ref.detectChanges();\n\n      this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n      this.dataSource = new DynamicDataSource(this.treeControl, this.database, this.ref);\n\n      this.dataSource.setActionDispatcher = this.actionDispatcher;\n\n      this.database.pagingMode = true;\n\n      this.setTreeDataToTreeView();\n      this.treeControl.collapseAll();\n    }\n    this.ref.detectChanges();\n  }\n\n  /** Creates tree view Nodes for searched data result. */\n  createSearchedNodes(result) {\n\n    /** Generates the hierarchy code for the searched data result. */\n    this.nodeCodeList = this.treeData.getSearchResultDataHierarchyCode(result);\n\n    this.dataSource.data = this.nodeCodeList;\n\n    /** Builds the Searched result tree along with its children nodes. */\n    const data = this.buildSearchResultTree(this.nodeCodeList, '0');\n\n    /** Notify the change. */\n    this.database.dataChange.next(data);\n\n    this.treeControl.expandAll();\n  }\n\n  /**\n  * Builds the search data structure tree view. The `value` is the Json object, or a sub-tree of a Json object.\n  * The return value is the list of `SearchItemNode`.\n  */\n  buildSearchResultTree(searchDataObj: any[], level: string): SearchItemNode[] {\n\n    return searchDataObj.filter(o =>\n      (<string>o.code).startsWith(level + '.')\n      && (o.code.match(/\\./g) || []).length === (level.match(/\\./g) || []).length + 1).map(o => {\n\n        const node = new SearchItemNode();\n        node.item = o.item;\n        node.code = o.code;\n        node.resultObject = o.resultObject;\n\n        const children = searchDataObj.filter(so => (<string>so.code).startsWith(level + '.'));\n\n        if (children && children.length > 0) {\n          node.children = this.buildSearchResultTree(children, o.code);\n        }\n        return node;\n      });\n  }\n\n  /** Displays the node details in the Summary details UI section for the selected node. */\n  displayCurrentSearchNodeDetails(node) {\n\n    /** Checks whether filter mode is On. */\n    if (this.database.filteredMode === true) {\n      for (let i = 0; i < this.nodeCodeList.length; i++) {\n        if (node.item === this.nodeCodeList[i].item) {\n\n          /** Checks whether the node is a leaf node. */\n          if (node.level === (this.database.nodePropertyNames.size - 1)) {\n\n            let temp = JSON.parse(JSON.stringify(this.nodeCodeList[i]));\n            delete temp.resultObject[this.leafNodeName];\n            this.database.setCurrentSelectedNode = temp;\n\n            let result = Object.values(this.nodeCodeList[i].resultObject[this.leafNodeName]);\n            this.database.setCurrentSelectedLeafNode = result;\n          } else {\n            node.resultObject = this.nodeCodeList[i].resultObject;\n            this.database.setCurrentSelectedNode = node;\n          }\n        }\n      }\n    } else {\n      this.database.setCurrentSelectedNode = node;\n    }\n  }\n\n  /** Clears the previously rendered data in leaf detail grid. */\n  clearLeafTableData() {\n\n    let tableHeadings = document.getElementsByTagName(\"th\");\n    const tableHeadDiv = document.getElementsByClassName(\"th-div\")[0] as HTMLElement;\n\n    for (let i = 0; i < tableHeadings.length;) {\n      (tableHeadings[i] as HTMLElement).remove();\n    }\n\n    let tableRows = document.getElementsByTagName(\"tr\");\n    for (let i = 0; i < tableRows.length;) {\n      (tableRows[i] as HTMLElement).remove();\n    }\n  }\n\n  /** Creates leaf node grid view. */\n  createLeafNodeDetailGrid() {\n    this.leafContainerElement = document.getElementById('leaf-container');\n\n    /** Creates leaf node grid headings. */\n    this.createLeafTableHeading();\n\n    let tableDataCell = null;\n    let tableRowData = null;\n    this.counter = 0;\n\n    for (; this.counter < this.treeLeafDataList.length; this.counter++) {\n\n      /** Creates leaf node rows for grid view. */\n      this.createLeafRows(this.counter);\n\n      for (let moduleListKey in this.treeLeafDataList[this.counter]) {\n        for (let i = 0; i < this.leafColumnConfig.length; i++) {\n\n          if (this.leafColumnConfig[i].name === moduleListKey) {\n\n            var table = document.getElementsByClassName(\"table-row-data\");\n\n            var lastRowIndex = table.length;\n\n            tableRowData = document.getElementsByClassName('table-row-data')[lastRowIndex - 1] as HTMLTableRowElement;\n\n            tableDataCell = tableRowData.cells;\n\n            let pos = this.leafColumnConfig[i].position;\n\n            let value = this.treeLeafDataList[this.counter][moduleListKey];\n\n            tableDataCell[pos].innerHTML = value;\n\n          }\n        }\n      }\n\n      tableDataCell[tableDataCell.length - 1].style.right = 0 + \"px\";\n      tableDataCell[tableDataCell.length - 1].style.width = 5 + '%';\n      tableDataCell[tableDataCell.length - 1].style.height = \"40px\";\n      tableDataCell[tableDataCell.length - 1].style.whiteSpace = 'nowrap';\n      tableDataCell[tableDataCell.length - 1].style.backgroundColor = \"white\";\n      tableDataCell[tableDataCell.length - 1].style.maxWidth = \"100px\";\n      tableDataCell[tableDataCell.length - 1].style.overflow = \"hidden\";\n      tableDataCell[tableDataCell.length - 1].style.textOverflow = \"ellipsis\";\n    }\n  }\n\n  /**\n   * Creates leaf node grid headings.\n  */\n  createLeafTableHeading(): void {\n    const tableHeadDiv = document.getElementsByClassName(\"th-div\")[0] as HTMLElement;\n\n    for (let i = 0; i < this.leafColumnConfig.length; i++) {\n      this.thElement = document.createElement('th');\n      this.thElement.style.padding = '10px';\n      this.thElement.style.textAlign = 'left';\n      this.thElement.style.borderBottom = '1px solid #ddd';\n      this.thElement.style.fontFamily = '\"Questrial\", sans-serif';\n      this.thElement.style.border = 'none';\n      this.thElement.style.outline = 'none';\n      this.thElement.style.fontSize = '14px';\n      this.thElement.style.letterSpacing = '1px';\n      this.thElement.style.height = '16px';\n      this.thElement.style.color = 'rgba(0,0,0,.54)';\n      // this.thElement.whiteSpace = 'nowrap';\n      this.thElement.style.width = 5 + '%';\n\n      const headName = this.leafColumnConfig[i].name;\n      this.thElement.innerHTML = this.leafColumnConfig[i].item;\n      this.thElement.classList.add(headName);\n\n      tableHeadDiv.appendChild(this.thElement);\n    }\n  }\n\n  /**\n   * Creates leaf node rows for leaf node detail grid view.\n   * @param value leaf data list element counter value.\n   */\n  createLeafRows(value) {\n    this.row = document.createElement('tr');\n\n    this.row.style.background = 'white';\n    this.row.style.padding = '5px';\n    this.row.classList.add(\"table-row-data\");\n\n    this.leafContainerElement.appendChild(this.row);\n    this.styleLeafCells();\n  }\n\n  /** Styles the leaf grid view cells with CSS. */\n  styleLeafCells() {\n\n    for (let i = 0; i < this.leafColumnConfig.length; i++) {\n      this.tdElement = document.createElement('td');\n      this.tdElement.style.paddingTop = '10px';\n      this.tdElement.style.paddingBottom = '10px';\n      this.tdElement.style.padding = '10px';\n      this.tdElement.style.textAlign = 'left';\n      this.tdElement.style.borderBottom = '1px solid #ddd';\n      this.tdElement.style.fontFamily = '\"Questrial\", sans-serif';\n      this.tdElement.style.border = 'none';\n      this.tdElement.style.outline = 'none';\n      this.tdElement.style.height = '39px';\n      this.tdElement.style.verticalAlign = 'middle';\n      this.tdElement.style.width = 5 + '%';\n      this.row.appendChild(this.tdElement);\n    }\n\n  }\n\n  /** Opens the node app in the same window. */\n  openAppInSameWindow(token, nodeName) {\n\n    this.actionDispatcher.dispatchAction(token, nodeName.toLowerCase());\n\n    this.closeDropdown();\n  }\n\n  /** Opens the node app in the new tab. */\n  public openAppInNewTab(token, nodeName) {\n\n    this.actionDispatcher.dispatchAction(token, nodeName.toLowerCase());\n\n    this.closeDropdown();\n  }\n\n  /** Closes the open-app functionality's menu-dropdown. */\n  closeDropdown() {\n    let dropdownsContents = document.getElementsByClassName('dropdown-content');\n\n    for (let i = 0; i < dropdownsContents.length; i++) {\n      const openDropdown = dropdownsContents[i];\n      if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n      }\n    }\n  }\n\n  /** Expands/Opens the open-app functionality's menu-dropdown. */\n  public showDropdown($event) {\n\n    if ($event.target.matches('.app-dropdown-button')) {\n\n      if ($event.target.offsetParent.nextSibling != null && $event.target.offsetParent.nextSibling.matches('.dropdown-content')) {\n        $event.target.offsetParent.nextSibling.classList.toggle(\"show\");\n\n      } else if ($event.target.nextSibling != null && $event.target.nextSibling.matches('.dropdown-content')) {\n        $event.target.nextSibling.classList.toggle(\"show\");\n      }\n    }\n  }\n} ","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n    FormsModule, ReactiveFormsModule\n  ]\n})\nexport class MaterialModuleSet {}","import { Directive, OnInit, Input } from '@angular/core';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-tree-data]'\n})\nexport class AoTreeDataDirective implements OnInit {\n\n  @Input() treeData;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setTreeData = this.treeData;\n  }\n\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { BaseActionDispatcher } from '../action/BaseActionDispatcher';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-actions]'\n})\nexport class AoActionsDirective implements OnInit{\n\n  @Input() actionDispatcher;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setActionDispatcher = this.actionDispatcher;\n  }\n\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-tree-config]'\n})\nexport class AoTreeConfigDirective implements OnInit {\n\n  @Input() treeConfig;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setTreeConfig = this.treeConfig;\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { EnterpriseTreeComponent } from './enterprise-tree.component';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModuleSet } from '../common/material-module';\nimport { AoTreeDataDirective } from '../directive/ao-tree-data.directive';\nimport { AoActionsDirective } from '../directive/ao-actions.directive';\nimport { AoTreeConfigDirective } from '../directive/ao-tree-config.directive';\n\n@NgModule({\n  declarations: [EnterpriseTreeComponent, AoTreeDataDirective, AoActionsDirective, AoTreeConfigDirective],\n  imports: [\n    CommonModule,\n    MaterialModuleSet,\n  ],\n  exports: [EnterpriseTreeComponent, AoTreeDataDirective, AoActionsDirective, AoTreeConfigDirective],\n  providers: [EnterpriseTreeComponent],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA,\n  ],\n})\nexport class EnterpriseTreeModule { }\n","import { ActionDispatcher } from \"./ActionDispatcher\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BaseActionDispatcher implements ActionDispatcher {\n  constructor() { }\n  /**\n   * Get the token convert it and call the method requested .\n   */\n  dispatchAction(token: string,...args): any {\n    const tokenArray = token.split(\"-\");\n    let transformedToken = [];\n    for (let i = 0; i < tokenArray.length; i++) {\n      if (i !== 0) {\n        transformedToken.push(tokenArray[i].charAt(0).toUpperCase() + tokenArray[i].slice(1));\n      } else {\n        transformedToken.push(tokenArray[i]);\n      }\n    }\n    const methodName = transformedToken.join(\"\");\n    return this[methodName].apply(this,args);\n  }\n\n}","export class ActionTypes{\n    static readonly node:string=\"node_action\";\n    static readonly hover:string=\"hover_action\";\n}"],"names":[],"mappings":"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"}
