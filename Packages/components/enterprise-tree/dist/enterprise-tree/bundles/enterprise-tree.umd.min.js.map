{"version":3,"sources":["ng://enterprise-tree/lib/enterprise-tree.service.ts","../node_modules/tslib/tslib.es6.js","ng://enterprise-tree/lib/dynamic-data-source.component.ts","ng://enterprise-tree/config/ActionsAndToolsConfig.ts","ng://enterprise-tree/config/LeafColumnConfig.ts","ng://enterprise-tree/config/TreeConfig.ts","ng://enterprise-tree/lib/enterprise-tree.component.ts","ng://enterprise-tree/common/material-module.ts","ng://enterprise-tree/directive/ao-tree-data.directive.ts","ng://enterprise-tree/directive/ao-actions.directive.ts","ng://enterprise-tree/directive/ao-tree-config.directive.ts","ng://enterprise-tree/lib/enterprise-tree.module.ts","ng://enterprise-tree/action/BaseActionDispatcher.ts","ng://enterprise-tree/config/ActionType.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnterpriseTreeService {\n\n  constructor() { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { BehaviorSubject, Observable, merge } from 'rxjs';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { map } from 'rxjs/internal/operators/map';\nimport { ChangeDetectorRef, Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { ActionDispatcher } from '../action/ActionDispatcher';\nimport { SearchItemNode } from './enterprise-tree.component';\n\n/** Flat node with expandable and level information */\nexport class DynamicFlatNode {\n    constructor(\n        public item?: string,\n        public level?: number,\n        public resultObject?: Object,\n        public expandable?: boolean,\n        public isLoading?: boolean,\n        public code?: string,\n        public children?: DynamicFlatNode[]\n    ) { }\n}\n\n/**\n * Database for dynamic data. When expanding a node in the tree, the data source will need to fetch\n * the descendants data from the database.\n */\n@Injectable()\nexport class DynamicDatabase {\n    dataChange = new BehaviorSubject<SearchItemNode[]>([]);\n\n    get data(): SearchItemNode[] { return this.dataChange.value; }\n\n    dataMap = new Map<string, string[]>();\n\n    nodeLevelMethodConfigurations = new Map<number, string>();\n\n    nodePropertyNames = new Map<number, string>();\n\n    currentLeafNodeNames = new Array();\n\n    filteredMode: boolean = false;\n\n    pagingMode: boolean = true;\n\n    rootLevelName;\n\n    rootLevelNodes = [];\n\n    currentSelectedNode: DynamicFlatNode = new DynamicFlatNode();\n\n    public currentSelectedNodeSource = new BehaviorSubject<DynamicFlatNode>(this.currentSelectedNode);\n    currentSelectedNodeValue = this.currentSelectedNodeSource.asObservable();\n\n    get getCurrentSelectedNode() {\n        return this.currentSelectedNode;\n    }\n\n    set setCurrentSelectedNode(value) {\n        this.currentSelectedNode = value;\n        this.currentSelectedNodeSource.next(this.currentSelectedNode);\n    }\n\n    get getRootLevelNodes() {\n        return this.rootLevelNodes;\n    }\n\n    set setRootLevelNodes(value) {\n        this.rootLevelNodes = value;\n    }\n\n    public currentSelectedLeafNodeSource = new BehaviorSubject<any>(this.currentLeafNodeNames);\n    currentSelectedLeafNodeValue = this.currentSelectedLeafNodeSource.asObservable();\n\n    get getCurrentSelectedLeafNode() {\n        return this.currentLeafNodeNames;\n    }\n\n    set setCurrentSelectedLeafNode(value) {\n        this.currentLeafNodeNames = value;\n        this.currentSelectedLeafNodeSource.next(this.currentLeafNodeNames);\n    }\n\n    /** Initialize data for root level nodes */\n    initialData(): DynamicFlatNode[] {\n\n        return this.rootLevelNodes.map(result => new DynamicFlatNode(result[this.rootLevelName], 0, result, true));\n    }\n\n\n    getChildren(node: string): string[] | undefined {\n        return this.dataMap.get(node);\n    }\n\n    isExpandable(node: string): boolean {\n        return this.dataMap.has(node);\n    }\n}\n\n\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\n@Injectable()\nexport class DynamicDataSource implements OnInit, OnDestroy {\n\n    dataChange: BehaviorSubject<DynamicFlatNode[]> = new BehaviorSubject<DynamicFlatNode[]>([]);\n    operationList;\n    currentService: string;\n\n\n\n    private actionDispatcher: ActionDispatcher;\n\n    get data(): DynamicFlatNode[] {\n        return this.dataChange.value;\n    }\n\n    set data(value: DynamicFlatNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    public set setActionDispatcher(value: any) {\n        this.actionDispatcher = value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<DynamicFlatNode>, private database: DynamicDatabase, private changeDetectorRef: ChangeDetectorRef) {\n\n    }\n\n    ngOnInit(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public ngOnDestroy(): void {\n        this.changeDetectorRef.detach();\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n        this.treeControl.expansionModel.onChange!.subscribe(change => {\n            if ((change as SelectionChange<DynamicFlatNode>).added ||\n                (change as SelectionChange<DynamicFlatNode>).removed) {\n                this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n            }\n        });\n\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n\n    disconnect(collectionViewer: CollectionViewer): void {\n        this.dataChange.complete();\n    }\n\n    /** Handle expand/collapse behaviors */\n    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n\n        if (change.added) {\n            change.added.forEach(node => this.toggleNode(node, true));\n        }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n        }\n    }\n\n    /**\n     * Toggle the node for the selected node, and make server call to get it's children.\n     */\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n\n        let currentPropertyName;\n\n        this.database.filteredMode = false;\n\n        if (this.database.filteredMode === false) {\n\n            this.database.setCurrentSelectedNode = node;\n\n            for (let [level, token] of this.database.nodeLevelMethodConfigurations) {\n                if (level === node.level) {\n\n                    /** Dispatch action for leaf node. */\n                    if (level === this.database.nodeLevelMethodConfigurations.size - 1) {\n\n                        this.actionDispatcher.dispatchAction(token, node.resultObject).then(\n                            result => {\n                                let currentLeafNodeNames = new Array();\n\n                                for (let [level, propName] of this.database.nodePropertyNames) {\n                                    if (level === node.level) {\n                                        currentPropertyName = propName;\n                                    }\n                                }\n\n                                if(result != null) {\n\n                                    for (let i = 0; i < result.length; i++) {\n\n                                        currentLeafNodeNames.push(result[i][currentPropertyName]);\n                                    }\n                                }\n\n                                this.database.setCurrentSelectedLeafNode = result;\n\n                            }\n                        );\n\n                    } else {\n                        node.isLoading = true;\n\n                        this.actionDispatcher.dispatchAction(token, node.resultObject).then(\n                            result => {\n                                this.populateNodeList(result, node, expand);\n                            }\n                        );\n                    }\n                }\n            }\n        }\n\n    }\n\n    /** Populate parent nodes with their children*/\n    populateNodeList(nodeList, node, expand) {\n\n        let nodeNames = new Array();\n        let currentPropertyName;\n\n        for (let [level, propName] of this.database.nodePropertyNames) {\n            if (level === node.level) {\n                currentPropertyName = propName;\n            }\n        }\n\n        if (nodeList != null) {\n\n            for (let i = 0; i < nodeList.length; i++) {\n\n                nodeNames.push(nodeList[i][currentPropertyName]);\n            }\n\n            this.database.dataMap.set(node.item, nodeNames);\n\n            this.expandChildNodes(node, expand, nodeList, nodeNames);\n\n        } else {\n            node.isLoading = false;\n            return;\n        }\n    }\n\n    /** Expand child nodes */\n    expandChildNodes(node: DynamicFlatNode, expand: boolean, nodeList, childNodes) {\n\n        const children = this.database.getChildren(node.item);\n        const index = this.data.indexOf(node);\n\n        if (!children || index < 0) { // If no children, or cannot find the node, no op\n            console.log(\"no children returning\");\n            return;\n        }\n\n        if (expand) {\n\n            let i = 0;\n\n            /** Create new child nodes */\n            const nodes = nodeList.map(result => new DynamicFlatNode(childNodes[i++], node.level + 1, result, this.database.isExpandable(node.item)));\n\n            this.data.splice(index + 1, 0, ...nodes);\n\n        } else {\n            let count = 0;\n            for (let i = index + 1; i < this.data.length && this.data[i].level > node.level; i++, count++) { }\n            this.data.splice(index + 1, count);\n        }\n\n        /** notify the change */\n        this.dataChange.next(this.data);\n        node.isLoading = false;\n        this.changeDetectorRef.detectChanges();\n    }\n}","export class ActionsAndToolsConfig {\n\n    public name: string;\n    public enable: boolean;\n    public token: string;\n    public level: number;\n    public type: string;\n    public isIcon: boolean;\n    public nodePropertyName: string;\n    public isApp: boolean;\n\n    public constructor(name: string, enable: boolean, token: string, level?: number, type?: string, icon?: boolean, nodePropertyName?: string, isApp?: boolean) {\n        this.name = name;\n        this.enable = enable;\n        this.token = token;\n        this.level = level;\n        this.type = type;\n        this.isIcon = icon;\n        this.nodePropertyName = nodePropertyName;\n        this.isApp = isApp;\n    }\n\n    public get getName(): string {\n        return this.name;\n    }\n    public set setName(value: string) {\n        this.name = value;\n    }\n    public get getEnable(): boolean {\n        return this.enable;\n    }\n    public set setEnable(value: boolean) {\n        this.enable = value;\n    }\n    public get getToken(): string {\n        return this.token;\n    }\n    public set setToken(value: string) {\n        this.token = value;\n    }\n    public get getLevel(): number {\n        return this.level;\n    }\n    public set setLevel(value: number) {\n        this.level = value;\n    }\n    public get getType(): string {\n        return this.type;\n    }\n    public set setType(value: string) {\n        this.type = value;\n    }\n    public get getIcon(): boolean {\n        return this.isIcon;\n    }\n    public set setIcon(value: boolean) {\n        this.isIcon = value;\n    }\n    public get getNodePropertyName(): string {\n        return this.nodePropertyName;\n    }\n    public set setNodePropertyName(value: string) {\n        this.nodePropertyName = value;\n    }\n    public get getApp(): boolean {\n        return this.isApp;\n    }\n    public set setApp(value: boolean) {\n        this.isApp = value;\n    }\n}","export class LeafColumnConfig {\n    private name: String;\n    private item: String;\n    private position: number;\n   \n    constructor(name , item , position){\n        this.name=name;\n        this.item=item;\n        this.position=position;\n    }\n\n    public get getname(): String {\n        return this.name;\n    }\n    public set setname(value: String) {\n        this.name = value;\n    }\n    public get getitem(): String {\n        return this.item;\n    }\n    public set setitem(value: String) {\n        this.item = value;\n    }\n    public get getPosition(): number {\n        return this.position;\n    }\n    public set setPosition(value: number) {\n        this.position = value;\n    }\n}","import { ActionsAndToolsConfig } from './ActionsAndToolsConfig';\nimport { Injectable } from '@angular/core';\nimport { LeafColumnConfig } from './LeafColumnConfig';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeConfig {\n\n    public treeHeader: string;\n    public totalLevels: number;\n    public rootLevelNode : string;\n    public actionsAndToolsArr: ActionsAndToolsConfig[] = new Array();\n    public pageSize: number;\n    public leafNodeTitle: string;\n    public leafNodeName: string;\n    public leafColumnConfigArr: LeafColumnConfig[] = new Array();\n    \n    constructor() {\n\n    }\n\n    public get getTreeHeader(): string {\n        return this.treeHeader;\n    }\n\n    public set setTreeHeader(value: string) {\n        this.treeHeader = value;\n    }\n\n    public get getTotalLevels(): number {\n        return this.totalLevels;\n    }\n\n    public set setTotalLevels(value: number) {\n        this.totalLevels = value;\n    }\n\n    public get getRootLevelNode(): string {\n        return this.rootLevelNode;\n    }\n\n    public set setRootLevelNode(value: string) {\n        this.rootLevelNode = value;\n    }\n\n    public addActionsAndToolConfig(name: string, enable: boolean, token: string, level?: number, type?: string, isIcon?: boolean, nodeName?: string, isApp?: boolean) {\n        this.actionsAndToolsArr.push(new ActionsAndToolsConfig(name, enable, token, level, type, isIcon, nodeName, isApp));\n    }\n\n    public get getPageSize() {\n        return this.pageSize;\n    }\n    public set setPageSize(value) {\n        this.pageSize = value;\n    }\n\n    public get getLeafNodeTitle() {\n        return this.leafNodeTitle;\n    }\n\n    public set setLeafNodeTitle(value) {\n        this.leafNodeTitle = value;\n    }\n\n    public get getLeafNodeName() {\n        return this.leafNodeName;\n    }\n\n    public set setLeafNodeName(value) {\n        this.leafNodeName = value;\n    }\n\n    public get getLeafNodeColumnConfig(): LeafColumnConfig[] {\n        return this.leafColumnConfigArr;\n    }\n\n    public addLeafNodeColumnConfig(name: string, item: string, position: number) {\n        this.leafColumnConfigArr.push(new LeafColumnConfig(name, item, position));\n    }\n}","import { Component, OnInit, Injectable, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { TreeData } from '../action/TreeData';\nimport { ActionDispatcher } from '../action/ActionDispatcher';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { DynamicDatabase, DynamicFlatNode, DynamicDataSource } from './dynamic-data-source.component';\nimport { ActionsAndToolsConfig } from '../config/ActionsAndToolsConfig';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material';\nimport { TreeConfig } from '../config/TreeConfig';\n\n/**\n * Node for to-do item\n */\nexport class SearchItemNode {\n  children: SearchItemNode[];\n  item: string;\n  code: string;\n  resultObject: Object;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class SearchItemFlatNode {\n  item: string;\n  level: number;\n  expandable: boolean;\n  code: string;\n  resultObject: Object;\n}\n\n\n@Component({\n  selector: 'ao-enterprise-tree',\n  templateUrl: './enterprise-tree.component.html',\n  styleUrls: ['./enterprise-tree.component.css'],\n  providers: [DynamicDatabase],\n  changeDetection: ChangeDetectionStrategy.Default,\n})\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseTreeComponent implements OnInit, OnDestroy {\n\n  treeConfig = new Array();\n\n  treeDataList = new Array();\n\n  treeData: TreeData;\n\n  treeHeader: string = '';\n\n  //Search Value\n  searchValue: string;\n\n  //Search Name Suggestion\n  searchNameSuggestion = [];\n\n  //Clear Filter\n  clearFliter: boolean = false;\n\n  //Add Filter Button loop\n  filterSelectedValue = {};\n\n  //Display filter loop \n  displayFilterValue = [];\n\n  //Key for search data\n  getKey;\n\n  counter: number = 0;\n\n  pageNumber: number = 1;\n\n  pageSize: number = 12;\n\n  rootLevelNode: string = '';\n\n  //Total tree node levels\n  totalLevels: number = 0;\n\n  enableActionToolbar = new ActionsAndToolsConfig(\"enableActionToolbar\", false, '');\n  enableSearchToolBar = new ActionsAndToolsConfig(\"enableSearchToolBar\", false, '');\n  enableSearchPlaceholder = new ActionsAndToolsConfig(\"enableSearchPlaceholder\", false, '');\n  enableSearchBar = new ActionsAndToolsConfig(\"enableSearchBar\", false, '');\n  enableInitialText = new ActionsAndToolsConfig(\"enableInitialText\", false, '');\n  enableNodeDetails = new ActionsAndToolsConfig(\"enableNodeDetails\", false, '');\n  enableLeafNodeDetails = new ActionsAndToolsConfig(\"enableLeafNodeDetails\", false, '');\n  nodeFilteration = new ActionsAndToolsConfig(\"nodeFilteration\", true, '');\n\n  enableAppToolButton = new ActionsAndToolsConfig(\"enableAppToolButton\", false, '');\n  openAppSameWindow = new ActionsAndToolsConfig(\"openAppSameWindow\", false, '');\n  openAppNewTab = new ActionsAndToolsConfig(\"openAppNewTab\", false, '');\n\n  currentNodeDetailList = new Map();\n\n  currentLeafNodeDetailList = new Array();\n\n  //Leaf node grid view column names\n  leafColumnConfig = new Array();\n\n  //Leaf node data\n  treeLeafDataList = new Array();\n\n  //Leaf node title in Summary details\n  leafNodeTitle = '';\n\n  //Leaf node name in result json object\n  leafNodeName = '';\n\n  //Leaf node code list for displaying result object of search services by text(In filtered Mode = On)\n  nodeCodeList = [];\n\n  leafContainerElement;\n  row: HTMLTableRowElement;\n  tdElement: HTMLTableCellElement;\n  thElement: HTMLTableHeaderCellElement;\n\n  private actionDispatcher: ActionDispatcher;\n\n  flatNodeMap = new Map<SearchItemFlatNode, SearchItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<SearchItemNode, SearchItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: SearchItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<any>;\n\n  dataSource;\n\n  treeFlattener: MatTreeFlattener<SearchItemNode, SearchItemFlatNode>;\n\n  getLevel = (node: SearchItemFlatNode) => node.level;\n\n  isExpandable = (node: SearchItemFlatNode) => node.expandable;\n\n  getChildren = (node: SearchItemNode): SearchItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: SearchItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: SearchItemFlatNode) => _nodeData.item === '';\n\n  transformer = (node: SearchItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode = existingNode && existingNode.item === node.item\n      ? existingNode\n      : new SearchItemFlatNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  @ViewChild(CdkVirtualScrollViewport, { static: false }) virtualScroll: CdkVirtualScrollViewport;\n\n  constructor(private database: DynamicDatabase, private treeConfiguration: TreeConfig, private ref: ChangeDetectorRef) {\n\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, this.database, this.ref);\n\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel, this.isExpandable, this.getChildren);\n\n    this.database.dataChange.subscribe(data => {\n      this.dataSource.data = data;\n    });\n  }\n\n  /** Destroys/Detaches the change detection reference. */\n  public ngOnDestroy(): void {\n    this.ref.detach();\n  }\n\n  public ngOnInit() {\n    this.leafColumnConfig = [];\n\n    /** Subscribes to the current selected node value. */\n    this.database.currentSelectedNodeValue.subscribe((node) => {\n\n      if (node.item !== undefined) {\n        this.enableInitialText.setEnable = false;\n        this.enableNodeDetails.setEnable = true;\n\n        if (this.enableLeafNodeDetails.enable === true) {\n          this.enableLeafNodeDetails.enable = false;\n        }\n\n        this.currentNodeDetailList.clear();\n        this.clearLeafTableData();\n\n        this.printDetails(node.resultObject);\n        this.ref.detectChanges();\n      }\n    });\n\n    /** Subscribes to the current selected leaf node value. */\n    this.database.currentSelectedLeafNodeValue.subscribe((result) => {\n\n      if (result.length !== 0) {\n        this.enableInitialText.setEnable = false;\n        this.enableNodeDetails.setEnable = true;\n        this.enableLeafNodeDetails.setEnable = true;\n        this.treeLeafDataList = result;\n        this.ref.detectChanges();\n        this.createLeafNodeDetailGrid();\n      }\n    });\n  }\n\n  /** Method displays the node details(other than leaf node) for the selected tree node. */\n  printDetails(nodeDetailObj) {\n\n    if (this.database.filteredMode === true) {\n      if (this.enableLeafNodeDetails.enable === true) {\n        this.enableLeafNodeDetails.enable = false;\n      }\n    }\n\n    for (const i in nodeDetailObj) {\n      if (nodeDetailObj[i] instanceof Object) {\n        this.printDetails(nodeDetailObj[i]);\n\n      } else {\n        for (const [key, value] of Object.entries(nodeDetailObj)) {\n          if (value instanceof Array) {\n\n            delete nodeDetailObj[key];\n\n          }\n          this.currentNodeDetailList.set(i, nodeDetailObj[i]);\n        }\n      }\n    }\n\n  }\n\n  /** Sets the tree data */\n  set setTreeData(data) {\n    this.treeData = data;\n  }\n\n  /** Set action dispatcher value @param value to Data Source. */\n  public set setActionDispatcher(value: any) {\n    this.actionDispatcher = value;\n    this.dataSource.setActionDispatcher = value;\n  }\n\n  /** Sets tree configurations @param data to enterprise tree respective properties. */\n  set setTreeConfig(data) {\n\n    if (data.pageSize != undefined || data.pageSize != null) {\n      this.pageSize = data.pageSize;\n    }\n\n    this.treeHeader = data.treeHeader;\n    this.treeConfig = data.actionsAndToolsArr;\n    this.rootLevelNode = data.rootLevelNode;\n    this.totalLevels = data.totalLevels;\n    this.leafNodeTitle = data.leafNodeTitle;\n    this.leafNodeName = data.leafNodeName;\n    this.treeConfiguration.setTotalLevels = data.totalLevels;\n    this.leafColumnConfig = data.leafColumnConfigArr;\n\n    this.sortTreeConfig(this.treeConfig);\n    this.setTreeDataToTreeView();\n  }\n\n  /**\n   * This method sorts the tree configuration.\n   * @param treeConfig JSON object of tree configuration.\n   */\n  sortTreeConfig(treeConfig) {\n    let enterpTreeCompKeys = Object.getOwnPropertyNames(this);\n\n    for (let i = 0; i < enterpTreeCompKeys.length; i++) {\n      for (let j = 0; j < treeConfig.length; j++) {\n        if (treeConfig[j].name === enterpTreeCompKeys[i]) {\n          this[enterpTreeCompKeys[i]] = treeConfig[j];\n          break;\n        }\n      }\n    }\n\n    for (let j = 0; j < treeConfig.length; j++) {\n      if (treeConfig[j].type === 'node_action') {\n\n        this.database.nodeLevelMethodConfigurations.set(treeConfig[j].level, treeConfig[j].token);\n\n        this.database.nodePropertyNames.set(treeConfig[j].level, treeConfig[j].nodePropertyName);\n\n      }\n    }\n\n  }\n\n  /** \n   * Initialize the root level tree data to @rootLevelNodes & root level node name to @rootLevelNode */\n  setTreeDataToTreeView() {\n\n    this.treeData.getRootNodeData(this.pageNumber, this.pageSize).then(\n      result => {\n        this.database.rootLevelName = this.rootLevelNode;\n        this.database.rootLevelNodes = result;\n\n        this.dataSource.data = this.database.initialData();\n      }\n    );\n  }\n\n  /**\n   * Append the next batch of tree data to @rootLevelNodes */\n  getNextBatchOfPage() {\n\n    if (Math.floor(this.virtualScroll.measureScrollOffset('bottom')) === 0) {\n\n      console.log(Math.floor(this.virtualScroll.measureScrollOffset('bottom')), \"getNextBatchOfPage \");\n\n      if (this.database.pagingMode === true) {\n\n        this.treeData.getNextPage(++this.pageNumber, this.pageSize).then(\n          result => {\n\n            if (result != null) {\n              this.treeDataList = result;\n\n              this.database.rootLevelName = this.rootLevelNode;\n\n              for (let i = 0; i < this.treeDataList.length; i++) {\n                this.database.rootLevelNodes.push(this.treeDataList[i]);\n              }\n\n              this.dataSource.data = this.database.initialData();\n\n            } else {\n              return;\n            }\n          },\n          error => {\n            console.log(error);\n          }\n        );\n      }\n    }\n  }\n\n  /** Filters the tree data with input of text type. */\n  filterNodes(filterText: string) {\n\n    this.database.filteredMode = true;\n    this.database.pagingMode = false;\n\n    if (filterText) {\n      this.enableInitialText.setEnable = true;\n      this.enableNodeDetails.setEnable = false;\n\n      this.actionDispatcher.dispatchAction(this.nodeFilteration.token, filterText).then(\n        result => {\n\n          /** Set the tree control for SearchItemFlatNodes. */\n          this.treeControl = new FlatTreeControl<SearchItemFlatNode>(this.getLevel, this.isExpandable);\n\n          /** Set the data Source for SearchItemFlatNodes and SearchItemNode. */\n          this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n          if (result.length > 0) {\n\n            this.createSearchedNodes(result);\n\n          }\n        });\n    }\n    if (filterText === '') {\n      this.enableInitialText.setEnable = true;\n      this.enableNodeDetails.setEnable = false;\n      this.enableLeafNodeDetails.setEnable = false;\n      this.ref.detectChanges();\n\n      this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\n      this.dataSource = new DynamicDataSource(this.treeControl, this.database, this.ref);\n\n      this.dataSource.setActionDispatcher = this.actionDispatcher;\n\n      this.database.pagingMode = true;\n\n      this.setTreeDataToTreeView();\n      this.treeControl.collapseAll();\n    }\n    this.ref.detectChanges();\n  }\n\n  /** Creates tree view Nodes for searched data result. */\n  createSearchedNodes(result) {\n\n    /** Generates the hierarchy code for the searched data result. */\n    this.nodeCodeList = this.treeData.getSearchResultDataHierarchyCode(result);\n\n    this.dataSource.data = this.nodeCodeList;\n\n    /** Builds the Searched result tree along with its children nodes. */\n    const data = this.buildSearchResultTree(this.nodeCodeList, '0');\n\n    /** Notify the change. */\n    this.database.dataChange.next(data);\n\n    this.treeControl.expandAll();\n  }\n\n  /**\n  * Builds the search data structure tree view. The `value` is the Json object, or a sub-tree of a Json object.\n  * The return value is the list of `SearchItemNode`.\n  */\n  buildSearchResultTree(searchDataObj: any[], level: string): SearchItemNode[] {\n\n    return searchDataObj.filter(o =>\n      (<string>o.code).startsWith(level + '.')\n      && (o.code.match(/\\./g) || []).length === (level.match(/\\./g) || []).length + 1).map(o => {\n\n        const node = new SearchItemNode();\n        node.item = o.item;\n        node.code = o.code;\n        node.resultObject = o.resultObject;\n\n        const children = searchDataObj.filter(so => (<string>so.code).startsWith(level + '.'));\n\n        if (children && children.length > 0) {\n          node.children = this.buildSearchResultTree(children, o.code);\n        }\n        return node;\n      });\n  }\n\n  /** Displays the node details in the Summary details UI section for the selected node. */\n  displayCurrentSearchNodeDetails(node) {\n\n    /** Checks whether filter mode is On. */\n    if (this.database.filteredMode === true) {\n      for (let i = 0; i < this.nodeCodeList.length; i++) {\n        if (node.item === this.nodeCodeList[i].item) {\n\n          /** Checks whether the node is a leaf node. */\n          if (node.level === (this.database.nodePropertyNames.size - 1)) {\n\n            let temp = JSON.parse(JSON.stringify(this.nodeCodeList[i]));\n            delete temp.resultObject[this.leafNodeName];\n            this.database.setCurrentSelectedNode = temp;\n\n            let result = Object.values(this.nodeCodeList[i].resultObject[this.leafNodeName]);\n            this.database.setCurrentSelectedLeafNode = result;\n          } else {\n            node.resultObject = this.nodeCodeList[i].resultObject;\n            this.database.setCurrentSelectedNode = node;\n          }\n        }\n      }\n    } else {\n      this.database.setCurrentSelectedNode = node;\n    }\n  }\n\n  /** Clears the previously rendered data in leaf detail grid. */\n  clearLeafTableData() {\n\n    let tableHeadings = document.getElementsByTagName(\"th\");\n    const tableHeadDiv = document.getElementsByClassName(\"th-div\")[0] as HTMLElement;\n\n    for (let i = 0; i < tableHeadings.length;) {\n      (tableHeadings[i] as HTMLElement).remove();\n    }\n\n    let tableRows = document.getElementsByTagName(\"tr\");\n    for (let i = 0; i < tableRows.length;) {\n      (tableRows[i] as HTMLElement).remove();\n    }\n  }\n\n  /** Creates leaf node grid view. */\n  createLeafNodeDetailGrid() {\n    this.leafContainerElement = document.getElementById('leaf-container');\n\n    /** Creates leaf node grid headings. */\n    this.createLeafTableHeading();\n\n    let tableDataCell = null;\n    let tableRowData = null;\n    this.counter = 0;\n\n    for (; this.counter < this.treeLeafDataList.length; this.counter++) {\n\n      /** Creates leaf node rows for grid view. */\n      this.createLeafRows(this.counter);\n\n      for (let moduleListKey in this.treeLeafDataList[this.counter]) {\n        for (let i = 0; i < this.leafColumnConfig.length; i++) {\n\n          if (this.leafColumnConfig[i].name === moduleListKey) {\n\n            var table = document.getElementsByClassName(\"table-row-data\");\n\n            var lastRowIndex = table.length;\n\n            tableRowData = document.getElementsByClassName('table-row-data')[lastRowIndex - 1] as HTMLTableRowElement;\n\n            tableDataCell = tableRowData.cells;\n\n            let pos = this.leafColumnConfig[i].position;\n\n            let value = this.treeLeafDataList[this.counter][moduleListKey];\n\n            tableDataCell[pos].innerHTML = value;\n\n          }\n        }\n      }\n\n      tableDataCell[tableDataCell.length - 1].style.right = 0 + \"px\";\n      tableDataCell[tableDataCell.length - 1].style.width = 5 + '%';\n      tableDataCell[tableDataCell.length - 1].style.height = \"40px\";\n      tableDataCell[tableDataCell.length - 1].style.whiteSpace = 'nowrap';\n      tableDataCell[tableDataCell.length - 1].style.backgroundColor = \"white\";\n      tableDataCell[tableDataCell.length - 1].style.maxWidth = \"100px\";\n      tableDataCell[tableDataCell.length - 1].style.overflow = \"hidden\";\n      tableDataCell[tableDataCell.length - 1].style.textOverflow = \"ellipsis\";\n    }\n  }\n\n  /**\n   * Creates leaf node grid headings.\n  */\n  createLeafTableHeading(): void {\n    const tableHeadDiv = document.getElementsByClassName(\"th-div\")[0] as HTMLElement;\n\n    for (let i = 0; i < this.leafColumnConfig.length; i++) {\n      this.thElement = document.createElement('th');\n      this.thElement.style.padding = '10px';\n      this.thElement.style.textAlign = 'left';\n      this.thElement.style.borderBottom = '1px solid #ddd';\n      this.thElement.style.fontFamily = '\"Questrial\", sans-serif';\n      this.thElement.style.border = 'none';\n      this.thElement.style.outline = 'none';\n      this.thElement.style.fontSize = '14px';\n      this.thElement.style.letterSpacing = '1px';\n      this.thElement.style.height = '16px';\n      this.thElement.style.color = 'rgba(0,0,0,.54)';\n      // this.thElement.whiteSpace = 'nowrap';\n      this.thElement.style.width = 5 + '%';\n\n      const headName = this.leafColumnConfig[i].name;\n      this.thElement.innerHTML = this.leafColumnConfig[i].item;\n      this.thElement.classList.add(headName);\n\n      tableHeadDiv.appendChild(this.thElement);\n    }\n  }\n\n  /**\n   * Creates leaf node rows for leaf node detail grid view.\n   * @param value leaf data list element counter value.\n   */\n  createLeafRows(value) {\n    this.row = document.createElement('tr');\n\n    this.row.style.background = 'white';\n    this.row.style.padding = '5px';\n    this.row.classList.add(\"table-row-data\");\n\n    this.leafContainerElement.appendChild(this.row);\n    this.styleLeafCells();\n  }\n\n  /** Styles the leaf grid view cells with CSS. */\n  styleLeafCells() {\n\n    for (let i = 0; i < this.leafColumnConfig.length; i++) {\n      this.tdElement = document.createElement('td');\n      this.tdElement.style.paddingTop = '10px';\n      this.tdElement.style.paddingBottom = '10px';\n      this.tdElement.style.padding = '10px';\n      this.tdElement.style.textAlign = 'left';\n      this.tdElement.style.borderBottom = '1px solid #ddd';\n      this.tdElement.style.fontFamily = '\"Questrial\", sans-serif';\n      this.tdElement.style.border = 'none';\n      this.tdElement.style.outline = 'none';\n      this.tdElement.style.height = '39px';\n      this.tdElement.style.verticalAlign = 'middle';\n      this.tdElement.style.width = 5 + '%';\n      this.row.appendChild(this.tdElement);\n    }\n\n  }\n\n  /** Opens the node app in the same window. */\n  openAppInSameWindow(token, nodeName) {\n\n    this.actionDispatcher.dispatchAction(token, nodeName.toLowerCase());\n\n    this.closeDropdown();\n  }\n\n  /** Opens the node app in the new tab. */\n  public openAppInNewTab(token, nodeName) {\n\n    this.actionDispatcher.dispatchAction(token, nodeName.toLowerCase());\n\n    this.closeDropdown();\n  }\n\n  /** Closes the open-app functionality's menu-dropdown. */\n  closeDropdown() {\n    let dropdownsContents = document.getElementsByClassName('dropdown-content');\n\n    for (let i = 0; i < dropdownsContents.length; i++) {\n      const openDropdown = dropdownsContents[i];\n      if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n      }\n    }\n  }\n\n  /** Expands/Opens the open-app functionality's menu-dropdown. */\n  public showDropdown($event) {\n\n    if ($event.target.matches('.app-dropdown-button')) {\n\n      if ($event.target.offsetParent.nextSibling != null && $event.target.offsetParent.nextSibling.matches('.dropdown-content')) {\n        $event.target.offsetParent.nextSibling.classList.toggle(\"show\");\n\n      } else if ($event.target.nextSibling != null && $event.target.nextSibling.matches('.dropdown-content')) {\n        $event.target.nextSibling.classList.toggle(\"show\");\n      }\n    }\n  }\n} ","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n    FormsModule, ReactiveFormsModule\n  ]\n})\nexport class MaterialModuleSet {}","import { Directive, OnInit, Input } from '@angular/core';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-tree-data]'\n})\nexport class AoTreeDataDirective implements OnInit {\n\n  @Input() treeData;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setTreeData = this.treeData;\n  }\n\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { BaseActionDispatcher } from '../action/BaseActionDispatcher';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-actions]'\n})\nexport class AoActionsDirective implements OnInit{\n\n  @Input() actionDispatcher;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setActionDispatcher = this.actionDispatcher;\n  }\n\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { EnterpriseTreeComponent } from '../lib/enterprise-tree.component';\n\n@Directive({\n  selector: '[ao-tree-config]'\n})\nexport class AoTreeConfigDirective implements OnInit {\n\n  @Input() treeConfig;\n\n  constructor(private enterpTreeComp: EnterpriseTreeComponent) { }\n\n  ngOnInit(): void {\n    this.enterpTreeComp.setTreeConfig = this.treeConfig;\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { EnterpriseTreeComponent } from './enterprise-tree.component';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModuleSet } from '../common/material-module';\nimport { AoTreeDataDirective } from '../directive/ao-tree-data.directive';\nimport { AoActionsDirective } from '../directive/ao-actions.directive';\nimport { AoTreeConfigDirective } from '../directive/ao-tree-config.directive';\n\n@NgModule({\n  declarations: [EnterpriseTreeComponent, AoTreeDataDirective, AoActionsDirective, AoTreeConfigDirective],\n  imports: [\n    CommonModule,\n    MaterialModuleSet,\n  ],\n  exports: [EnterpriseTreeComponent, AoTreeDataDirective, AoActionsDirective, AoTreeConfigDirective],\n  providers: [EnterpriseTreeComponent],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA,\n  ],\n})\nexport class EnterpriseTreeModule { }\n","import { ActionDispatcher } from \"./ActionDispatcher\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BaseActionDispatcher implements ActionDispatcher {\n  constructor() { }\n  /**\n   * Get the token convert it and call the method requested .\n   */\n  dispatchAction(token: string,...args): any {\n    const tokenArray = token.split(\"-\");\n    let transformedToken = [];\n    for (let i = 0; i < tokenArray.length; i++) {\n      if (i !== 0) {\n        transformedToken.push(tokenArray[i].charAt(0).toUpperCase() + tokenArray[i].slice(1));\n      } else {\n        transformedToken.push(tokenArray[i]);\n      }\n    }\n    const methodName = transformedToken.join(\"\");\n    return this[methodName].apply(this,args);\n  }\n\n}","export class ActionTypes{\n    static readonly node:string=\"node_action\";\n    static readonly hover:string=\"hover_action\";\n}"],"names":["EnterpriseTreeService","Injectable","args","providedIn","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","item","level","resultObject","expandable","isLoading","code","children","this","DynamicDatabase","Object","defineProperty","prototype","dataChange","currentSelectedNode","currentSelectedNodeSource","rootLevelNodes","currentLeafNodeNames","currentSelectedLeafNodeSource","initialData","_this","map","result","DynamicFlatNode","rootLevelName","getChildren","node","dataMap","get","isExpandable","has","BehaviorSubject","Map","nodeLevelMethodConfigurations","nodePropertyNames","Array","filteredMode","pagingMode","currentSelectedNodeValue","asObservable","currentSelectedLeafNodeValue","DynamicDataSource","treeControl","dataNodes","actionDispatcher","ngOnInit","Error","ngOnDestroy","changeDetectorRef","detach","connect","collectionViewer","expansionModel","subscribe","change","added","removed","handleTreeControl","merge","viewChange","pipe","data","disconnect","complete","forEach","toggleNode","slice","reverse","expand","currentPropertyName","database","setCurrentSelectedNode","_b","tslib_1.__values","_c","_d","token","size","dispatchAction","then","level_1","propName","setCurrentSelectedLeafNode","populateNodeList","nodeList","nodeNames","set","expandChildNodes","childNodes","index","indexOf","console","log","i_1","nodes","_a","splice","apply","arguments","concat","__spread","count","detectChanges","FlatTreeControl","ChangeDetectorRef","ActionsAndToolsConfig","name","enable","type","isIcon","nodePropertyName","isApp","icon","LeafColumnConfig","position","TreeConfig","treeHeader","totalLevels","rootLevelNode","addActionsAndToolConfig","nodeName","actionsAndToolsArr","pageSize","leafNodeTitle","leafNodeName","leafColumnConfigArr","addLeafNodeColumnConfig","EnterpriseTreeComponent","ref","leafColumnConfig","undefined","enableInitialText","setEnable","enableNodeDetails","enableLeafNodeDetails","currentNodeDetailList","clear","clearLeafTableData","printDetails","treeLeafDataList","createLeafNodeDetailGrid","nodeDetailObj","entries","key","treeData","dataSource","setActionDispatcher","treeConfig","treeConfiguration","setTotalLevels","sortTreeConfig","setTreeDataToTreeView","enterpTreeCompKeys","getOwnPropertyNames","j","getRootNodeData","pageNumber","getNextBatchOfPage","Math","floor","virtualScroll","measureScrollOffset","getNextPage","treeDataList","filterNodes","filterText","nodeFilteration","getLevel","MatTreeFlatDataSource","treeFlattener","createSearchedNodes","collapseAll","nodeCodeList","getSearchResultDataHierarchyCode","buildSearchResultTree","expandAll","searchDataObj","filter","startsWith","match","SearchItemNode","so","displayCurrentSearchNodeDetails","temp","JSON","parse","stringify","values","tableHeadings","document","getElementsByTagName","getElementsByClassName","remove","tableRows","leafContainerElement","getElementById","createLeafTableHeading","tableDataCell","counter","moduleListKey","createLeafRows","pos","lastRowIndex","cells","innerHTML","style","right","width","height","whiteSpace","backgroundColor","maxWidth","overflow","textOverflow","tableHeadDiv","thElement","createElement","padding","textAlign","borderBottom","fontFamily","border","outline","fontSize","letterSpacing","color","headName","classList","add","appendChild","row","background","styleLeafCells","tdElement","paddingTop","paddingBottom","verticalAlign","openAppInSameWindow","toLowerCase","closeDropdown","openAppInNewTab","dropdownsContents","openDropdown","contains","showDropdown","$event","target","matches","offsetParent","nextSibling","toggle","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","ViewChild","CdkVirtualScrollViewport","static","searchNameSuggestion","clearFliter","filterSelectedValue","displayFilterValue","enableActionToolbar","enableSearchToolBar","enableSearchPlaceholder","enableSearchBar","enableAppToolButton","openAppSameWindow","openAppNewTab","currentLeafNodeDetailList","flatNodeMap","nestedNodeMap","selectedParent","newItemName","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","flatNode","SearchItemFlatNode","MatTreeFlattener","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","FormsModule","ReactiveFormsModule","MaterialModuleSet","AoTreeDataDirective","enterpTreeComp","setTreeData","Directive","Input","AoActionsDirective","AoTreeConfigDirective","setTreeConfig","declarations","imports","CommonModule","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","EnterpriseTreeModule","BaseActionDispatcher","_i","tokenArray","split","transformedToken","charAt","toUpperCase","join","ActionTypes","hover"],"mappings":"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"}